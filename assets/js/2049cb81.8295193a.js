"use strict";(self.webpackChunkzeko_documentation=self.webpackChunkzeko_documentation||[]).push([[468],{7177:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var s=t(5893),r=t(1151);const a={},o="Zeko sequencer",c={id:"sequencer",title:"Zeko sequencer",description:"Build",source:"@site/docs/sequencer.md",sourceDirName:".",slug:"/sequencer",permalink:"/zeko/sequencer",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"For zkapp developers",permalink:"/zeko/for_zkapp_developers"}},i={},l=[{value:"Build",id:"build",level:2},{value:"Tests",id:"tests",level:2},{value:"Run",id:"run",level:2},{value:"Deploy rollup contract to L1",id:"deploy-rollup-contract-to-l1",level:2},{value:"Transfers",id:"transfers",level:2},{value:"Create transfer request",id:"create-transfer-request",level:3},{value:"Fetch proved account update",id:"fetch-proved-account-update",level:3},{value:"Full example",id:"full-example",level:3},{value:"Fetching pending/completed transfers",id:"fetching-pendingcompleted-transfers",level:3},{value:"Fetching actions from graphql",id:"fetching-actions-from-graphql",level:4}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"zeko-sequencer",children:"Zeko sequencer"}),"\n",(0,s.jsx)(n.h2,{id:"build",children:"Build"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"DUNE_PROFILE=devnet dune build\n"})}),"\n",(0,s.jsx)(n.h2,{id:"tests",children:"Tests"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Run local network to imitate L1\nDUNE_PROFILE=devnet dune exec ./tests/local_network/run.exe -- --db-dir l1_db\n\nDUNE_PROFILE=devnet dune runtest\n"})}),"\n",(0,s.jsx)(n.h2,{id:"run",children:"Run"}),"\n",(0,s.jsxs)(n.p,{children:["Running the sequencer exposes the Graphql API on the port ",(0,s.jsx)(n.code,{children:"-p"}),". The Graphql schema is a subset of the L1 Graphql API joined with the L1 Graphql API for fetching of actions/events."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"DUNE_PROFILE=devnet dune exec ./run.exe -- \\\n    -p <int?> \\\n    --rest-server <string> \\\n    --zkapp-pk <string> \\\n    --signer <string> \\\n    --max-pool-size <int?> \\\n    --commitment-period <float?> \\\n    --da-contract-address <string?> \\\n    --db-dir <string?> \\\n    --test-accounts-path <string?>\n"})}),"\n",(0,s.jsx)(n.p,{children:"Run help to see the options:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"dune exec ./run.exe -- --help\n"})}),"\n",(0,s.jsx)(n.h2,{id:"deploy-rollup-contract-to-l1",children:"Deploy rollup contract to L1"}),"\n",(0,s.jsx)(n.p,{children:"The following script deploys the rollup contract on the L1 with the initial state, which is the genesis ledger of the rollup."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"DUNE_PROFILE=devnet dune exec ./deploy.exe -- \\\n    --rest-server <string> \\\n    --signer <string> \\\n    --test-accounts-path <string?>\n"})}),"\n",(0,s.jsx)(n.p,{children:"Run help to see the options:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"dune exec ./deploy.exe -- --help\n"})}),"\n",(0,s.jsx)(n.h2,{id:"transfers",children:"Transfers"}),"\n",(0,s.jsx)(n.p,{children:"To transfer funds from L1 to L2 and vice versa, you need to send a zkapp command to the bridge contract which dispatches an action representing the transfer.\nTo create such zkapp command you need the proved account update which you can get from the sequencer."}),"\n",(0,s.jsx)(n.p,{children:"The sequencer exposes async api for creating a transfer request for proving and then for fetching the proved account update."}),"\n",(0,s.jsx)(n.h3,{id:"create-transfer-request",children:"Create transfer request"}),"\n",(0,s.jsx)(n.p,{children:"The returned key can be used to poll the sequencer for the proved account update."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'mutation {\n  proveTransfer(input: {\n    "address": "recipient base58 address",\n    "amount": "uint64 amount to transfer",\n    "direction": DEPOSIT | WITHDRAW\n  }) {\n    key\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"fetch-proved-account-update",children:"Fetch proved account update"}),"\n",(0,s.jsx)(n.p,{children:"The returned json can be used to create a zkapp command for the bridge contract."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'query {\n  transfer(key: "key returned from proveTransfer")\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"full-example",children:"Full example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { AccountUpdate, Mina } from "o1js";\n\n// Send request to prove transfer\nconst response = await fetch(sequencerUrl, {\n  method: "POST",\n  headers: { "Content-Type": "application/json" },\n  body: JSON.stringify({\n    query: `\n        mutation ($transferInput: TransferInput!) {\n          proveTransfer(input: $transferInput) {\n            accountUpdateKey\n          }\n        }\n      `,\n    variables: {\n      transferInput: {\n        address: sender.toPublicKey().toBase58(),\n        amount: amount,\n        direction: "WRAP",\n      },\n    },\n  }),\n});\n\nconst key = (await response.json()).data.proveTransfer.accountUpdateKey;\n\n// Poll for proved account update\nlet transferCallForest: string | null = null;\nwhile (true) {\n  console.log("Polling for transferJson");\n  const response = await fetch(sequencerUrl, {\n    method: "POST",\n    headers: { "Content-Type": "application/json" },\n    body: JSON.stringify({\n      query: `\n          query ($key: String!) {\n            transfer(key: $key)\n          }\n        `,\n      variables: { key },\n    }),\n  });\n\n  transferCallForest = (await response.json()).data.transfer;\n\n  if (transferCallForest !== null) {\n    break;\n  } else {\n    await new Promise((resolve) => setTimeout(resolve, 3_000));\n  }\n}\n\n// Create zkapp command\nlet txn = await Mina.transaction(sender.toPublicKey(), () => {\n  AccountUpdate.fundNewAccount(sender.toPublicKey());\n\n  const fundsUpdate = AccountUpdate.createSigned(sender.toPublicKey());\n  fundsUpdate.balance.subInPlace(amount);\n});\n\n// Append proved account update to the command\nJSON.parse(transferCallForest).forEach((accountUpdate) => {\n  txn.transaction.accountUpdates.push(AccountUpdate.fromJSON(accountUpdate));\n});\n\nawait txn.sign([sender]).send();\n'})}),"\n",(0,s.jsx)(n.h3,{id:"fetching-pendingcompleted-transfers",children:"Fetching pending/completed transfers"}),"\n",(0,s.jsx)(n.p,{children:"All of the transfer requests both ways (deposits/withdrawals) are submitted as actions.\nBoth inner and outer smart contract handling transfers hold action states to keep track of the pending/completed transfers."}),"\n",(0,s.jsx)(n.p,{children:"The layout of state is following:"}),"\n",(0,s.jsx)(n.p,{children:"Outer account (deployed on L1):"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["0 - ",(0,s.jsx)(n.code,{children:"ledger_hash"}),": rollup ledger hash"]}),"\n",(0,s.jsxs)(n.li,{children:["1 - ",(0,s.jsx)(n.code,{children:"all_withdrawals"}),": withdrawals action state that has been updated with last commit"]}),"\n",(0,s.jsxs)(n.li,{children:["2 - ",(0,s.jsx)(n.code,{children:"withdrawals_processed"}),": withdrawals that has been processed so far"]}),"\n",(0,s.jsx)(n.li,{children:"action state: all deposits action state."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Inner account (deployed on L2):"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["0 - ",(0,s.jsx)(n.code,{children:"all_deposits"}),": deposits action state that has been updated right before last commit by sequencer"]}),"\n",(0,s.jsxs)(n.li,{children:["1 - ",(0,s.jsx)(n.code,{children:"deposits_processed"}),": deposits that has been processed so far"]}),"\n",(0,s.jsx)(n.li,{children:"action state: all withdrawals action state."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"You can fetch any interval of actions through graphql api or o1js tooling from both layers."}),"\n",(0,s.jsx)(n.h4,{id:"fetching-actions-from-graphql",children:"Fetching actions from graphql"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'query {\n  actions(\n    input: {\n      address: "address of the smart contract"\n      fromActionState: "action state to start from"\n      endActionState: "action state to end with"\n    }\n  ) {\n    actionData {\n      data\n    }\n  }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Here are some common intervals to fetch:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Processed deposits: ",(0,s.jsx)(n.code,{children:"[initialActionState, inner.state[1]]"})]}),"\n",(0,s.jsxs)(n.li,{children:["Processed withdrawals: ",(0,s.jsx)(n.code,{children:"[initialActionState, outer.state[2]]"})]}),"\n",(0,s.jsxs)(n.li,{children:["Deposits in process: ",(0,s.jsx)(n.code,{children:"[inner.state[1], inner.state[0]]"})]}),"\n",(0,s.jsxs)(n.li,{children:["Withdrawals in process: ",(0,s.jsx)(n.code,{children:"[outer.state[2], outer.state[1]]"})]}),"\n",(0,s.jsxs)(n.li,{children:["Pending deposits: ",(0,s.jsx)(n.code,{children:"[inner.state[0], outer.actionState]"})]}),"\n",(0,s.jsxs)(n.li,{children:["Pending withdrawals: ",(0,s.jsx)(n.code,{children:"[outer.state[1], inner.actionState]"})]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>c,a:()=>o});var s=t(7294);const r={},a=s.createContext(r);function o(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);